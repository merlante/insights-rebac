// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: rebac/v1/check.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCheckCheck = "/api.rebac.v1.Check/Check"

type CheckHTTPServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
}

func RegisterCheckHTTPServer(s *http.Server, srv CheckHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/check", _Check_Check0_HTTP_Handler(srv))
}

func _Check_Check0_HTTP_Handler(srv CheckHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCheckCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

type CheckHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
}

type CheckHTTPClientImpl struct {
	cc *http.Client
}

func NewCheckHTTPClient(client *http.Client) CheckHTTPClient {
	return &CheckHTTPClientImpl{client}
}

func (c *CheckHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/v1/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCheckCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
